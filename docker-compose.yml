version: '3.9'

services:
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '${REDIS_PORT}:6379'
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '${RABBITMQ_PORT}:5672'
      - '15672:15672'
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: test-obrio
      POSTGRES_PASSWORD: test-obrio
      POSTGRES_DB: test-obrio
    ports:
      - '${TYPEORM_PORT}:5432'
    networks:
      - backend
    env_file:
      - .env
    volumes:
      - ./db:/var/lib/postgresql/data

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    ports:
      - '3000:3000'
    networks:
      - backend
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure

  users:
    build:
      context: .
      dockerfile: apps/users/Dockerfile
    ports:
      - '3001:3001'
    networks:
      - backend
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    restart: on-failure
networks:
  backend:
    driver: bridge
